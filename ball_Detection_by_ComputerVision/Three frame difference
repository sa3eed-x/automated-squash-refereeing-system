
import cv2
import numpy as np

# Specify the path to your video file
video_path = '20sec_rally.mp4'

# Open the video file
cap = cv2.VideoCapture(video_path)

# Check if the video opened successfully
if not cap.isOpened():
    print("Error opening video file")

# Read the first three frames
ret, frame1 = cap.read()
ret, frame2 = cap.read()
ret, frame3 = cap.read()

# Convert the frames to grayscale
gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)
gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)
gray3 = cv2.cvtColor(frame3, cv2.COLOR_BGR2GRAY)
prev_x=0
# Read and process each frame
while cap.isOpened():
    ret, frame4 = cap.read()

    # Break the loop if the video is over
    if not ret:
        break

    # Convert the current frame to grayscale
    gray4 = cv2.cvtColor(frame4, cv2.COLOR_BGR2GRAY)

    # Perform three-frame differencing
    diff1 = cv2.absdiff(gray3, gray2)
    diff2 = cv2.absdiff(gray2, gray1)
    result_diff = cv2.bitwise_and(diff1, diff2)
    # Apply Gaussian filter
    # result_diff = cv2.GaussianBlur(result_diff, (7, 7), 1.5)

    # Apply Otsu's thresholding
    # _, threshold = cv2.threshold(result_diff, 16, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    _, threshold = cv2.threshold(result_diff, 30, 255, cv2.THRESH_BINARY)

    # Apply morphological operations to remove noise
    # Define a kernel (structuring element)
    kernel = np.ones((41, 41), np.uint8)
    threshold = cv2.morphologyEx(threshold, cv2.MORPH_CLOSE,kernel)
    # threshold = cv2.dilate(threshold,kernel,iterations=1)

    # Find contours in the binary image
    contours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # Draw contours on the original frame
    frame_contour = frame4.copy()
    cv2.drawContours(frame_contour, contours, -1, (0, 255, 0), 5)

    # Iterate through contours and filter based on size and velocity constraints
    for contour in contours:
        # Calculate contour area
        area = cv2.contourArea(contour)

        # Filter contours based on size
        if  1< area < 30:
            # Get bounding box coordinates
            x, y, w, h = cv2.boundingRect(contour)
            # Draw bounding box and velocity information on the frame
            cv2.rectangle(frame4, (x, y), (x + w, y + h), (0, 255, 0), 2)
            cv2.putText(frame4, f'ball', (x, y - 10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
            # Calculate velocity (assuming a constant frame rate)
            velocity = (x - prev_x) / 2  # Adjust the denominator based on your frame rate

            # Filter contours based on velocity constraint
            # if abs(velocity) > 3:  # Adjust the threshold based on your velocity constraint
            #     # Draw bounding box and velocity information on the frame
            #     cv2.rectangle(frame4, (x, y), (x + w, y + h), (0, 255, 0), 2)
            #     cv2.putText(frame4, f'ball', (x, y - 10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    # Update the previous frames
    gray1 = gray2.copy()
    gray2 = gray3.copy()
    gray3 = gray4.copy()
    prev_x = x  # Update the previous x-coordinate for velocity calculation
    # Display the original frame and the foreground mask
    cv2.imshow('Original Frame', frame4)
    cv2.imshow('Foreground Mask', threshold)
    cv2.imshow('Frame with Contours', frame_contour)
    # Break the loop if the 'q' key is pressed
    if cv2.waitKey(30) & 0xFF == ord('q'):
        break

# Release the video capture object
cap.release()

# Destroy all OpenCV windows
cv2.destroyAllWindows()
