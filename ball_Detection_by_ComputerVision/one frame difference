import cv2
import numpy as np
# Specify the path to your video file
video_path = '20sec_rally.mp4'

# Open the video file
cap = cv2.VideoCapture(video_path)

# Check if the video opened successfully
if not cap.isOpened():
    print("Error opening video file")

ret, frame1 = cap.read()

# Convert the first frame to grayscale
gray1 = cv2.cvtColor(frame1, cv2.COLOR_BGR2GRAY)

# Read and display frames from the video
while cap.isOpened():
    ret, frame2 = cap.read()

    # Convert the current frame to grayscale
    gray2 = cv2.cvtColor(frame2, cv2.COLOR_BGR2GRAY)

    # Perform frame differencing
    diff = cv2.absdiff(gray1, gray2)


    # Apply enhancements
    # gamma = 1.5
    # gamma_corrected = np.uint8(((diff / 255.0) ** gamma) * 255.0)
    # cv2.imshow('gamma_corrected Frame', gamma_corrected)
    # Apply Gaussian filter
    result_diff = cv2.GaussianBlur(diff, (7, 7), 1.4)

    # Apply a threshold to highlight significant changes
    _, threshold = cv2.threshold(diff, 40, 255, cv2.THRESH_BINARY)
    # _, threshold = cv2.threshold(result_diff, 16, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
    # # Apply adaptive thresholding
    # block_size = 11  # Size of the local neighborhood for thresholding
    # constant_value = 2  # Constant subtracted from the mean or weighted mean
    # adaptive_threshold = cv2.adaptiveThreshold(diff, 150, cv2.ADAPTIVE_THRESH_MEAN_C, cv2.THRESH_BINARY, block_size, constant_value)



    # # Apply morphological operations to remove connect parts
    kernel = np.ones((41, 41), np.uint8)
    threshold = cv2.morphologyEx(threshold, cv2.MORPH_CLOSE,kernel)
    # threshold = cv2.dilate(threshold,kernel,iterations=1)

    # Update the previous frame
    gray1 = gray2.copy()

    # Find contours in the binary image
    contours, _ = cv2.findContours(threshold, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

    # # Draw contours on the original frame
    frame_contour = frame2.copy()
    cv2.drawContours(frame_contour, contours, -1, (0, 255, 0), 5)
    # Iterate through contours and filter based on size and velocity constraints
    for contour in contours:
        # Calculate contour area
        area = cv2.contourArea(contour)
        if 7<area<30:
            x, y, w, h = cv2.boundingRect(contour)
            cv2.rectangle(frame2, (x, y), (x + w, y + h), (0, 0, 255), -1)
            cv2.putText(frame2, f'ball:', (x, y - 10),cv2.FONT_HERSHEY_SIMPLEX, 0.5, (255, 0, 0), 2)

    # Display the original frame and the foreground mask
    cv2.imshow('Original Frame', frame2)
    cv2.imshow('Foreground Mask', threshold)
    cv2.imshow('contours',frame_contour)

    # Break the loop if the video is over
    if not ret:
        break

    # # Display the frame
    # cv2.imshow('Video', frame)

    # Break the loop if the 'q' key is pressed
    if cv2.waitKey(25) & 0xFF == ord('q'):
        break

# Release the video capture object
cap.release()

# Destroy all OpenCV windows
cv2.destroyAllWindows()
